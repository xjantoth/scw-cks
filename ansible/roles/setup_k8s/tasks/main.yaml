---
- name: set ansible facts
  set_fact:
    _os_release: "{{ ansible_facts['distribution_version'] }}"

- name: fail when wrong Ubuntu version
  command: "ls"
  failed_when: 
    - _os_release != '20.04'

# TODO: blockinfile instead of lineinfile of Miska
- name: configuring ~/.vimrc
  template:
    src: vimrc.j2
    dest: ~/.vimrc

- name: Inserting a line to .basrc
  lineinfile:
    path: ~/.bashrc
    line: source <(kubectl completion bash)

- name: Inserting a line to .basrc
  lineinfile:
    path: ~/.bashrc
    line: alias k=kubectl

- name: Inserting a line to .basrc
  lineinfile:
    path: ~/.bashrc
    line: alias c=clear

- name: Inserting a line to .basrc
  lineinfile:
    path: ~/.bashrc
    line: complete -F __start_kubectl k

- name: setting up .bashrc
  command: |
    sed -i '1s/^/force_color_prompt=yes\n/' ~/.bashrc

- name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
  shell: |
    swapoff -a

- name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: install required packages
  package:
    name:
      - bash-completion 
      - binutils
      - git
    state: present
  become: yes

- name: reset kubernetes cluster if existed before
  shell: "kubeadm reset -f"
  ignore_errors: True
  tags:
    - k8s_init

- name: crictl rm 
  shell: "crictl rm --force $(crictl ps -a -q) || true"
  ignore_errors: True
  tags:
    - k8s_init

- name: unhold packaged
  shell: "apt-mark unhold kubelet kubeadm kubectl kubernetes-cni || true"
  ignore_errors: True

- name: remove required packages (cleanup process)
  package:
    name:
      - podman
      - containernetworking-plugins
      - docker.io
      - containerd
      - kubelet
      - kubeadm
      - kubectl
      - kubernetes-cni
    state: absent
  become: yes

- name: autoremove
  shell: "apt-get autoremove -y"
  ignore_errors: True
  
- name: systemctl daemon_reload
  ansible.builtin.systemd:
    daemon_reload: yes

- name: add key required for containerd and crio deps
  ansible.builtin.apt_key:
    url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/xUbuntu_{{ _os_release }}/Release.key"
    state: present

- name: add specified repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/xUbuntu_{{ _os_release }}/ /"
    state: present
    filename: devel:kubic:libcontainers:testing.list
    
- name: add CRIO key required for containerd and crio deps
  ansible.builtin.apt_key:
    url: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ KUBE_VERSION.split('.')[:2]|join('.') }}/xUbuntu_{{ _os_release }}/Release.key"
    state: present

- name: add specified crio repo into sources list
  ansible.builtin.apt_repository:
    repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ KUBE_VERSION.split('.')[:2]|join('.') }}/xUbuntu_{{ _os_release }}/ /"
    state: present
    filename: devel:kubic:libcontainers:testing.list
    
- name: install required packages
  package:
    name:
      - podman 
      - cri-tools 
      - containers-common
      - cri-o 
      - cri-o-runc
    state: present
  become: yes

- name: configuring /etc/containers/registries.conf
  template:
    src: registries.conf.j2
    dest: /etc/containers/registries.conf

- name: removing specified repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/xUbuntu_{{ _os_release }}/ /"
    state: absent
    filename: devel:kubic:libcontainers:testing.list

- name: add kubernetes key
  ansible.builtin.apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present

- name: Add kubernetes source list
  ansible.builtin.apt_repository:
    repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    state: present
    filename: kubernetes.list

- name: install required packages
  package:
    name:
      - containerd 
      - kubelet={{ KUBE_VERSION }}-00
      - kubeadm={{ KUBE_VERSION }}-00
      - kubectl={{ KUBE_VERSION }}-00
      - kubernetes-cni
    state: present
  become: yes

- name: hold packaged
  shell: "apt-mark hold kubelet kubeadm kubectl kubernetes-cni || true"

- name: configuring /etc/modules-load.d/containerd.conf
  template:
    src: containerd.conf.j2
    dest: /etc/modules-load.d/containerd.conf
    
- name: modeprobe overlay
  community.general.modprobe:
    name: overlay
    state: present
  become: yes

- name: modeprobe br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: yes

- name: configuring /etc/sysctl.d/99-kubernetes-cri.conf
  template:
    src: 99-kubernetes-cri.conf.j2
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    
- name: autoremove
  shell: "sysctl --system"
  become: yes

- name: create a directory /etc/containerd
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: configuring /etc/containerd/config.toml
  template:
    src: containerd-config.toml.j2
    dest: /etc/containerd/config.toml
    
- name: systemctl daemon_reload
  ansible.builtin.systemd:
    daemon_reload: yes

- name: enable and start services
  ansible.builtin.systemd:
    state: started
    name: "{{ item }}"
    enabled: yes
  with_items:
    - containerd
    - kubelet
    - crio
    
- name: install etcdctl binary
  shell: |
    wget https://github.com/etcd-io/etcd/releases/download/{{ ETCDCTL_VERSION }}/etcd-{{ ETCDCTL_VERSION }}-linux-amd64.tar.gz
    tar xzf etcd-{{ ETCDCTL_VERSION }}-linux-amd64.tar.gz
    mv etcd-{{ ETCDCTL_VERSION }}-linux-amd64/etcdctl /usr/bin/
    rm -rf etcd-{{ ETCDCTL_VERSION }}-linux-amd64 etcd-{{ ETCDCTL_VERSION }}-linux-amd64.tar.gz

- name: remove kubeconfig
  shell: "rm /root/.kube/config || true"
  tags:
    - k8s_init

- name: configuring /etc/crictl.yaml
  template:
    src: etc-crictl.yaml.j2
    dest: /etc/crictl.yaml
  tags:
    - k8s_init

- name: kubeadm init ...
  command: |
    kubeadm init \
      --kubernetes-version={{ KUBE_VERSION }} \
      --ignore-preflight-errors=NumCPU,Mem \
      --skip-token-print \
      --pod-network-cidr 192.168.0.0/16 \
      --cri-socket "{{ 'unix:///var/run/crio/crio.sock' if container_runtime=='crio' else 'unix:///run/containerd/containerd.sock' }}"
  tags:
    - k8s_init

- name: create a directory ~/.kube
  ansible.builtin.file:
    path: ~/.kube
    state: directory
    mode: '0755'
  tags:
    - k8s_init

- name: copy file with owner and permissions
  shell: "yes | cp -i /etc/kubernetes/admin.conf ~/.kube/config"
  tags:
    - k8s_init

    #- name: kubectl apply -f .../calico.yaml
    #  command: kubectl apply -f {{ calico_url }}
    #  tags:
    #    - k8s_init

- name: kubeadm token ...
  command: "kubeadm token create --print-join-command --ttl 0"
  register: _join_token
  tags:
    - k8s_init

- name: print kubeadm token
  debug:
    msg: "{{ _join_token }}"


